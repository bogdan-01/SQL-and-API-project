knitr::opts_chunk$set(eval = FALSE)
all_employees <- dbGetQuery(db_connection,
"SELECT * FROM employees")
library(RPostgreSQL)
all_employees <- dbGetQuery(db_connection,
"SELECT * FROM employees")
db_connection <- dbConnect(drv = PostgreSQL(), user = username, password = password, dbname = "acme_employees", host = "localhost")
library(keyring)
library(RPostgreSQL)
keyring_unlock("local")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
db_connection <- dbConnect(drv = PostgreSQL(), user = username, password = password, dbname = "acme_employees", host = "localhost")
rm(username, password)
all_employees <- dbGetQuery(db_connection,
"SELECT * FROM employees")
all_employees <- dbGetQuery(db_connection,
"SELECT * FROM employees")
all_employees
dbGetQuery(db_connection,
"SELECT *, CONCAT(first_name, ' ', last_name) AS full_name
FROM employees")
dbGetQuery(db_connection,
"SELECT e.first_name, e.last_name, e.email, t.name AS team_name
FROM employees AS e LEFT JOIN teams AS t
ON e.team_id = t.id")
dbGetQuery(db_connection,
"SELECT t.name AS team_name, COUNT(e.id) AS num_employees
FROM employees AS e RIGHT JOIN teams AS t
ON e.team_id = t.id
GROUP BY t.name
ORDER BY num_employees DESC")
dbGetQuery(db_connection,
"SELECT * FROM employees
WHERE email NOT LIKE '%@%' OR email IS NULL")
dbGetQuery(db_connection,
"SELECT COUNT(*) AS num_only_first_initial, t.name AS team_name
FROM employees AS e LEFT JOIN teams AS t
ON e.team_id = t.id
WHERE e.first_name LIKE '_'
GROUP BY team_name
ORDER BY num_only_first_initial DESC NULLS LAST
LIMIT 1")
# POST to API and get content() of response
# will be a list with structure
response_list <- list(
results = list(
anger = 0.05099975,
fear = 0.04647598,
joy = 0.68175,
sadness = 0.0226995,
surprise = 0.1980747
)
)
keyring_unlock("remote")
keyring_unlock("remote")
key_set("indico_api_key")
keyring_lock("remote")
messages <- c("I really like working here, great place, decent perks", "Hmm, not so sure I'll stay: long working hours and low pay, bad morale")
get_emotions_from_indico_api <- function(api_key, url, message){
params <- list(
api_key = api_key,
data = message
)
response <- POST(url, query = params)
return(content(response))
}
messages <- c(
"I really like working here, great place, decent perks",
"Hmm, not so sure I'll stay: long working hours and low pay, bad morale"
)
keyring_unlock("remote")
indico_api_key <- key_get("indico_api_key")
keyring_lock("remote")
indico_url <- 'https://apiv2.indico.io/emotion'
from_message_1 <- get_emotions_from_indico_api(indico_api_key, indico_url, messages[1])
from_message_1 <- get_emotions_from_indico_api(indico_api_key, indico_url, messages[1])
messages <- c("What a nice place to work, I love my colleagues.", "politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises", "My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat", "I really want to quit as soon as possible, I feel stuck")
messages <- c(
"What a nice place to work, I love my colleagues.",
"politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises",
"My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat",
"I really want to quit as soon as possible, I feel stuck"
)
messages <- c(
"What a nice place to work, I love my colleagues.",
"politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises",
"My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat",
"I really want to quit as soon as possible, I feel stuck"
)
# using purrr
library(purrr)
results <- map(messages, get_emotions_from_indico_api, api_key = indico_api_key, url = indico_url)
keyring_unlock("remote")
key_set("indico_api_key")
t
keyring_unlock("remote")
indico_api_key <- key_get("indico_api_key")
keyring_lock("remote")
indico_url <- 'https://apiv2.indico.io/emotion'
from_message_1 <- get_emotions_from_indico_api(indico_api_key, indico_url, messages[1])
from_message_1 <- get_emotions_from_indico_api(indico_api_key, indico_url, messages[1])
results <- map(messages, get_emotions_from_indico_api, api_key = indico_api_key, url = indico_url)
get_emotions_from_indico_api <- function(api_key, url, message){
params <- list(
api_key = api_key,
data = message
)
response <- POST(url, query = params)
return(content(response))
}
library(httr)
get_emotions_from_indico_api <- function(api_key, url, message){
params <- list(
api_key = api_key,
data = message
)
response <- POST(url, query = params)
return(content(response))
}
from_message_1 <- get_emotions_from_indico_api(indico_api_key, indico_url, messages[1])
from_message_1
from_message_2 <- get_emotions_from_indico_api(indico_api_key, indico_url, messages[2])
from_message_2
str(from_message_1)
messages <- c("What a nice place to work, I love my colleagues.", "politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises", "My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat", "I really want to quit as soon as possible, I feel stuck")
messages <- c(
"What a nice place to work, I love my colleagues.",
"politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises",
"My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat",
"I really want to quit as soon as possible, I feel stuck"
)
library(purrr)
results <- map(messages, get_emotions_from_indico_api, api_key = indico_api_key, url = indico_url)
flatten_results <- map(results, flatten)
flatten_results <- map(results, flatten)
flatten_results <- map(results, flatten)
message <- "I love writing R code!"
# POST to API and get content() of response
# will be a list with structure
response_list <- list(
results = list(
anger = 0.05099975,
fear = 0.04647598,
joy = 0.68175,
sadness = 0.0226995,
surprise = 0.1980747
)
)
flatten_results <- map(results, flatten)
flatten_results <- map(results, flatten)
flatten_results <- map(results, flatten)
results_purrr <- map_dfr(flatten_results, as.list)
results_purrr
results_baseR <- data.frame()
for (message in messages){
this_result <- get_emotions_from_indico_api(indico_api_key, indico_url, message)
as_vector <- unlist(this_result$results)
results_baseR <- rbind(results_baseR, as_vector)
}
colnames(results_baseR) <- c("anger", "fear", "joy", "sadness", "surprise")
colnames(results_baseR) <- c("anger", "fear", "joy", "sadness", "surprise")
results_baseR
colnames(results_baseR) <- c("anger", "fear", "joy", "sadness", "surprise")
# or in base R - slow
results_baseR <- data.frame()
for (message in messages){
this_result <- get_emotions_from_indico_api(indico_api_key, indico_url, message)
as_vector <- unlist(this_result$results)
results_baseR <- rbind(results_baseR, as_vector)
}
colnames(results_baseR) <- c("anger", "fear", "joy", "sadness", "surprise")
messages <- c("What a nice place to work, I love my colleagues.", "politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises", "My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat", "I really want to quit as soon as possible, I feel stuck")
messages <- c(
"What a nice place to work, I love my colleagues.",
"politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises",
"My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat",
"I really want to quit as soon as possible, I feel stuck"
)
colnames(results_baseR) <- c("anger", "fear", "joy", "sadness", "surprise")
View(results)
messages <- c(
"What a nice place to work, I love my colleagues.",
"politics and cliques, it's really difficult to fit in here, we need more teambuilding exercises",
"My boss is lovely, she is genuinely interested in my development, and takes time each day for a chat",
"I really want to quit as soon as possible, I feel stuck"
)
colnames(results_baseR) <- c("anger", "fear", "joy", "sadness", "surprise")
# get all feedbacks
messages <- dbGetQuery(db_connection, "SELECT message FROM feedbacks")
messages <- messages$message
# pass all through emotions endpoint and store results
results <- map(messages, get_emotions_from_indico_api, api_key = indico_api_key, url = indico_url)
# now get mean of each emotion
map_df(results, mean, na.rm = TRUE)
flatten_results <- map(results, flatten)
results <- map_dfr(flatten_results, as.list)
# now get mean of each emotion
map_df(results, mean, na.rm = TRUE)
# first, get data frame with employee names, team name and message
employees_teams_messages <- dbGetQuery(db_connection,
"SELECT e.id, e.first_name, e.last_name, t.name AS team_name, f.message
FROM employees AS e LEFT JOIN teams AS t
ON e.team_id = t.id
INNER JOIN feedbacks AS f
ON f.employee_id = e.id")
# now fetch all emotions results
messages <- employees_teams_messages$message
results <- map(messages, get_emotions_from_indico_api, api_key = indico_api_key, url = indico_url)
flatten_results <- map(results, flatten)
library(keyring)
library(RPostgreSQL)
db_connection <- dbConnect(drv = PostgreSQL(), user = username, password = password, dbname = "acme_employees", host = "localhost")
keyring_unlock("local")
db_connection <- dbConnect(drv = PostgreSQL(), user = username, password = password, dbname = "acme_employees", host = "localhost")
username <- key_get(service = "postgresql_username", keyring = "local")
password <- key_get(service = "postgresql_password", keyring = "local")
keyring_lock("local")
db_connection <- dbConnect(drv = PostgreSQL(), user = username, password = password, dbname = "acme_employees", host = "localhost")
all_employees <- dbGetQuery(db_connection,
"SELECT * FROM employees")
